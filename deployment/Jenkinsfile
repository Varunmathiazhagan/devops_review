pipeline {
    agent any

    environment {
        DOCKERHUB_USER = 'varun4546'
        BACKEND_IMAGE = "${DOCKERHUB_USER}/devforge-backend:latest"
        FRONTEND_IMAGE = "${DOCKERHUB_USER}/devforge-frontend:latest"
    }

    stages {
        stage('Clone Repo') {
            steps {
                git 'https://github.com/Varunmathiazhagan/devops_review.git'
            }
        }

        stage('Build Backend Image') {
            steps {
                dir('backend') {
                    script {
                        docker.build(env.BACKEND_IMAGE, '.')
                    }
                }
            }
        }

        stage('Build Frontend Image') {
            steps {
                dir('.') {
                    script {
                        docker.build(env.FRONTEND_IMAGE, '.')
                    }
                }
            }
        }

        stage('Push Images to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-creds') {
                            docker.image(env.BACKEND_IMAGE).push()
                            docker.image(env.FRONTEND_IMAGE).push()
                        }
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh 'kubectl apply -f deployment/mongodb-secret.yaml'
                    sh 'kubectl apply -f deployment/backend-deployment.yaml'
                    sh 'kubectl apply -f deployment/backend-service.yaml'
                    sh 'kubectl apply -f deployment/frontend-deployment.yaml'
                    sh 'kubectl apply -f deployment/frontend-service.yaml'
                }
            }
        }
    }

    post {
        success {
            echo 'Application deployed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
